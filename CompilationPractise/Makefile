# Имя компилятора
CC=gcc
# Директория, в которой располагаются заголовочные файлы 
IDIR=inc
# Опции компиляции (.с -> .o)
COPT=-I $(IDIR) -g
# Дополнительные файлы для зависимостей
_DEPS=core.h
# Список зависимостей с учетом директории (добавляем префикс $(IDIR)/ = inc/) 
DEPS=$(addprefix $(IDIR)/,$(_DEPS))
# DEPS=inc/core.h

# Директория, где будем хранить объектные файлы
ODIR=obj
# Список исходных файлов для сборки прожекта
_SRC=main.c core.c
# Список объектных файлов (формируется из списка _SRC подменой суффикса)
_OBJ=$(_SRC:.c=.o)
# _OBJ=main.o core.o

# Список объектных файлов с учетом директории (добавляем префикс $(ODIR)/ = obj/)
OBJ=$(addprefix $(ODIR)/,$(_OBJ))
# OBJ=obj/main.o obj/core.o

# Имя программы
PRNAME=prog


### Цели ###
## $@ - название цели
## $< - первый файл в зависимостях
## $^ - все файлы в зависимостях
# Основная цель, полная сборка
all: $(ODIR) $(PRNAME)

# Цель создания папки для объектных файлов
$(ODIR):
	mkdir -p $@

# Цель генерации самой программы из объектных файлов
$(PRNAME): $(OBJ)
	$(CC) -o $(PRNAME) $^

# Цель генерации объектных файлов (с учетом директории)
# Используется при необходимости генерации любого файла вида obj/(какой-то файл).o
# Когда встречается в зависимостях obj/core.o в зависимости данной цели подставляется вместо %.с core.c
# То есть .o файл генерируется в папке, .c файл ищется в корне проекта
$(ODIR)/%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(COPT)


# Очистка файлов компиляции (остаются только файлы, из которых можно это собрать)
clean:
	rm -rf $(ODIR) $(PREPROCDIR) $(PRNAME)